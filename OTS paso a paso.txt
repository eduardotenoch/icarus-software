Prerequisitos para que funcione el proyecto en Amazon Linux 2.

1.- Intalación de PostgreSQL.

=========================================================================

Prerequisitos para la instalación de PostgreSQL12.

=========================================================================

1.- instalación de paqueterias necesarias para instalar PostgresSQL12.

sudo yum -y update

sudo  amazon-linux-extras | grep postgre

2.- en esta parte debes copiar todo y pegarlo al mismo tiempo.

sudo tee /etc/yum.repos.d/pgdg.repo<<EOF
[pgdg12]
name=PostgreSQL 12 for RHEL/CentOS 7 - x86_64
baseurl=https://download.postgresql.org/pub/repos/yum/12/redhat/rhel-7-x86_64
enabled=1
gpgcheck=0
EOF

## Fin del copiado.

3 Actualizamos el cache de yum.

sudo yum makecache

=========================================================================

Instalación de PostgresSQL12 e inicialización de servicios.

=========================================================================

1.- Instalamos PostgreSQL.

sudo yum install postgresql12 postgresql12-server

2.- Comando para inicializar la la BD.

sudo /usr/pgsql-12/bin/postgresql-12-setup initdb

3.- Para empezar el servicio de la BD.

sudo systemctl enable --now postgresql-12

4.- para checar el status de la de PostgresSQL12.

systemctl status postgresql-12

5.- Para iniciar la consola de PostgresSQL.

sudo -u postgres psql

6.- Cambia la contraseña de postgres (Root).

psql -c "alter user postgres with password 'TuContra'"

=========================================================================

Creación de la base de datos, usuario y modificación de conectividad.

=========================================================================

1.- creación del usuario.

CREATE USER otsusr WITH password 'Admin01';

2.- creamos la base de datos.

CREATE DATABASE otsdb WITH OWNER otsusr;

3.- acceder a la base de datos con un usuario.

# Fuera del entorno SQL.

# EJEMPLO psql -U nombre_usuario nombre_db

psql -U otsusr otsdb;

4.- Configura el archivo pg_hba.conf.

sudo vim /var/lib/pgsql/12/data/pg_hba.conf

## buscamos una parte parecida a esta y ponemos tal cual aparece

# TYPE  DATABASE        USER            ADDRESS                 METHOD

# "local" is for Unix domain socket connections only
local   all             all                                     md5
# IPv4 local connections:
host    all             all             127.0.0.1/32            md5
# IPv6 local connections:
host    all             all             ::1/128                 md5

=========================================================================

Instalación de conectividad entre django y postgres.

=========================================================================

1.- pip install psycopg2-binary

=========================================================================

Paquete necesario para la instalación del requeriments.txt.

=========================================================================

sudo yum install python-devel postgresql-devel

=========================================================================

Fin de los prerequisitos.

=========================================================================



=========================================================================

GENERACIÓN DEL PROYECTO.

=========================================================================

Descargamos los zip.

Yo me acomodo más usando dos consolas, una para el back y otra para el front.

Para el backend.

1.- creamos el venv "python3.9 -m venv env".

2.- activamos el entorno virtual "source bin/activate".

3.- nos vamos al back end e instalamos los requisitos "pip3.9 install -r requirements.txt"

3.1- Editamos el código del back, nos vamos a "ots - settings.py" y buscamos 
     la parte que dice "DATABASES" en esa parte cambiamos el host por "127.0.0.1".

4.- python3.9 manage.py makemigrations

5.- python3.9 manage.py migrate

6.- python3.9 manage.py runserver

Para el frontend.

1.- Nos vamos a la carpeta donde tenemos el front.

2.- Uso el comando "yarn" # Para esto debes tener instalado la Yarn Manager.

3.- Ahora haremos una instalación y modificaciones al código para que funcione en nuestro entorno.

3.1 instalamos "yarn add --dev @semantic-ui-react/css-patch".

3.2 Nos dirigimos a la carpeta raiz del front y en "package.json" buscamos "Scripts" y agregamos:

    "postinstall": "semantic-ui-css-patch"

3.3 Ahora nos dirigimos a NodeModules y seleccionamos la carpeta y el archivo.
    Carpeta -->  semantic-ui-css/semantic.css  <-- Archivo

3.4 Buscamos dentro del archivo @font-face y corregimos las URL, solo sigue las primeras dos para
    saber como va la estructura del código.

4.- yarn start


